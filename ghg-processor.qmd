---
title: "GHG processor"
author: "Bond-Lamberty / Wilson"
title-block-banner: true
params:
  html_outfile: "ghg-processor.html"
  data_folder: "test/"
  output_folder: "output/"
  metadata_folder: "test/"
  msmt_length_min: 5
  msmt_deadband_sec: 10
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    toc: true
    code-fold: true
editor: visual
---

## Initializing

```{r}
suppressPackageStartupMessages({
  library(readr)
  library(lubridate)
  library(ggplot2)
  library(readxl)
  library(broom)
  library(DT)
})
theme_set(theme_bw())

data_files <- list.files(params$data_folder, 
                         pattern = "*txt$", 
                         full.names = TRUE, recursive = TRUE)
metadata_files <- list.files(params$metadata_folder, 
                             pattern = "*xlsx$", 
                             full.names = TRUE, recursive = TRUE)
```

I see `r length(data_files)` data files to process.

I see `r length(metadata_files)` metadata files to process.

Measurement length is `r params$msmt_length_min` minutes.

Writing output to ``r normalizePath(params$output_folder)``.

HTML outfile is ``r params$html_outfile``.

Working directory is ``r getwd()``.

## Read in GHG data

```{r}
errors <- 0

read_ghg_data <- function(fn) {
  basefn <- basename(fn)
  message(Sys.time(), " Processing ", basefn)
  
  dat_raw <- readLines(fn)
  
  # These files have five header lines, the names of the columns in line 6,
  # and then the column units in line 7
  dat <- try({
    readr::read_table(I(dat_raw[-c(1,2,3,4,5,7)]), na = "nan")
  })
  
  if(is.data.frame(dat)) {
    # Save the serial number in case we want to look at machine differences later
    message("\tRead in ", nrow(dat), " rows of data, ", 
            min(dat$DATE), " to ", max(dat$DATE))
    sn <- gsub("SN:\t", "", dat_raw[2], fixed = TRUE)
    message("\tInstrument serial number: ", sn)
    dat$SN <- sn
    # Parse the timezone from the header and use it to make a TIMESTAMP field
    tz <- gsub("Timezone:\t", "", dat_raw[5], fixed = TRUE)
    message("\tInstrument time zone: ", tz)
    # We record the time zone but don't convert the timestamps to it as
    # that's not needed right now; metadata time is guaranteed to be same
    dat$TIMESTAMP <- lubridate::ymd_hms(paste(dat$DATE, dat$TIME))
    dat$TZ <- tz
    dat$DATE <- dat$TIME <- NULL
  } else {
    warning("File read error for ", basefn)
    errors <<- errors + 1
    dat <- NULL
  }

  dat
}

dat <- lapply(data_files, read_ghg_data)
dat <- do.call("rbind", dat)
```

Errors: `r errors`

```{r}
#| echo: false
#| output: asis

if(errors) cat("**<span style='color:red'>---> At least one error occurred! <---</span>**")
```

Total observations: `r format(nrow(dat), big.mark = ",")`


## Read in metadata

```{r}
errors <- 0

read_metadata <- function(fn) {
  basefn <- basename(fn)
  message(Sys.time(), " Processing ", basefn)
  
  metadat_raw <- try({
    read_excel(fn)
  })
  
  if(is.data.frame(metadat_raw)) {
    # What?
    metadat_raw$File <- basefn
    # Note that it's guaranteed that metadata time is instrument time,
    # so we don't worry about any time zones right now
    metadat <- metadat_raw
  } else {
    warning("File read error for ", basefn)
    errors <<- errors + 1
    metadat <- NULL
  }

  metadat
}

metadat <- lapply(metadata_files, read_metadata)
metadat <- do.call("rbind", metadat)
metadat$Obs <- seq_len(nrow(metadat))
```

Errors: `r errors`

Total rows: `r nrow(metadat)`

## Metadata-data matching

```{r}
# For each row of metadata, find corresponding observational data
zero_match <- FALSE
matched_dat <- list()
for(i in seq_len(nrow(metadat))) {
  ts <- metadat$Time_start[i]
  start_time <- metadat$Date[i] + hour(ts) * 60 * 60 + minute(ts) * 60 + second(ts)
  end_time <- start_time + params$msmt_length_min * 60

  # Subset data following timestamp in metadata and store
  x <- subset(dat, TIMESTAMP >= start_time & TIMESTAMP < end_time)
  if(!nrow(x)) zero_match <- TRUE
  x$Obs <- i
  x$ELAPSED_SECS <- time_length(interval(min(x$TIMESTAMP), x$TIMESTAMP), "seconds")
  matched_dat[[i]] <- x
  message("Metadata row ", i, " ", metadat$Plot[i], " start = ", start_time, " matched ", nrow(matched_dat[[i]]), " data rows")
  message("\t", min(x$TIMESTAMP), " to ", max(x$TIMESTAMP))
}

# Combine all subsetted data together and merge with metadata 
combined_dat <- do.call("rbind", matched_dat)
combined_dat <- merge(metadat, combined_dat, by = "Obs")
rm(dat)

n <- nrow(combined_dat)
neg_CO2 <- sum(combined_dat$CO2 < 0, na.rm = TRUE)
na_CO2 <- sum(is.na(combined_dat$CO2), na.rm = TRUE)
na_CH4 <- sum(is.na(combined_dat$CH4), na.rm = TRUE)
```

```{r}
#| echo: false
#| output: asis

if(zero_match) cat("**<span style='color:red'>---> At least one metadata row had no matching data! <---</span>**")
```


## CO2 and CH4 measurement data

Observations with negative CO2: `r neg_CO2` (`r round(neg_CO2 / n * 100, 0)`%)

Observations with missing CO2: `r na_CO2` (`r round(na_CO2 / n * 100, 0)`%)

Distribution of CO2 values:

```{r}
OVERALL_PLOT_N <- 300
summary(combined_dat$CO2)
```

Plot of `r OVERALL_PLOT_N` random CO2 values (y axis 5%-95%):

```{r}
#| fig-width: 8
#| fig-height: 4

ylim_co2 <- quantile(combined_dat$CO2, probs = c(0.05, 0.95), na.rm = TRUE)

dat_small <- combined_dat[sample.int(n, OVERALL_PLOT_N, replace = TRUE),]
ggplot(dat_small, aes(TIMESTAMP, CO2, color = Plot)) + 
  geom_point(na.rm = TRUE) +
  coord_cartesian(ylim = ylim_co2)
```

Observations with missing CH4: `r na_CH4` (`r round(na_CH4 / n * 100, 0)`%)

Distribution of CH4 values:

```{r}
summary(combined_dat$CH4)
```

Plot of `r OVERALL_PLOT_N` random CH4 values (y axis 5%-95%):

```{r}
#| fig-width: 8
#| fig-height: 4

ylim_ch4 <- quantile(combined_dat$CH4, probs = c(0.05, 0.95), na.rm = TRUE)

dat_small <- combined_dat[sample.int(n, OVERALL_PLOT_N, replace = TRUE),]
ggplot(dat_small, aes(TIMESTAMP, CH4, color = Plot)) + 
  geom_point(na.rm = TRUE) +
  coord_cartesian(ylim = ylim_ch4)
```


## Observations by plot and day

```{r}
#| fig-width: 8
ggplot(combined_dat, aes(ELAPSED_SECS, CO2, group = Obs)) + 
  geom_point(na.rm = TRUE) +
  facet_wrap(~Plot, scales = "free") +
  geom_smooth(method = lm, formula = 'y ~ x', na.rm = TRUE, color = "blue")

ggplot(combined_dat, aes(ELAPSED_SECS, CH4, group = Obs)) + 
  geom_point(na.rm = TRUE) +
  facet_wrap(~Plot, scales = "free") +
  geom_smooth(method = lm, formula = 'y ~ x', na.rm = TRUE, color = "blue")
```

## Flux computation

```{r}

# Change units - todo

model_fit_error <- FALSE
fit_model <- function(df, depvar) {
  message("Fitting model for obs ", df$Obs[1], " ", df$Plot[1], " ", depvar)
  # Metadata
  info <- data.frame(Obs = df$Obs[1],
                     TIMESTAMP = mean(df$TIMESTAMP),
                     TZ = df$TZ[1],
                     SN = df$SN[1])
  # Fit a linear model
  try(mod <- lm(df[,depvar] ~ df[,"ELAPSED_SECS"]))
  if(!exists("mod")) {
    message("\tERROR!")
    model_fit_error <- model_fit_error & FALSE
  }
  # Model statistics
  model_stats <- glance(mod)
  model_stats$Gas <- depvar
  # Slope (flux) statistics
  slope_stats <- tidy(mod)[2,-1]
  names(slope_stats) <- paste("flux", names(slope_stats), sep = "_")
  cbind(info, model_stats, slope_stats)
}
results_co2 <- lapply(split(combined_dat, combined_dat$Obs), fit_model, "CO2")
results_ch4 <- lapply(split(combined_dat, combined_dat$Obs), fit_model, "CH4")
results <- do.call("rbind", c(results_co2, results_ch4))
# Re-merge with metadata
results <- merge(results, metadat, by = "Obs")
```


```{r}
#| echo: false
#| output: asis

if(model_fit_error) cat("**<span style='color:red'>---> At least one model didn't fit! <---</span>**")
```

## QA/QC

Lots of possibilities here...

```{r}
#| fig-width: 8
#| fig-height: 4

formatRound(datatable(results),
            which(sapply(results, is.numeric)), digits = 3)

ggplot(results, aes(x = TIMESTAMP, y = flux_estimate, color = Plot)) + 
  geom_point() + 
  geom_errorbar(aes(ymin = flux_estimate - flux_std.error,
                    ymax = flux_estimate + flux_std.error)) +
  facet_wrap(~Gas, scales = "free")

ggplot(results, aes(x = flux_estimate, y = adj.r.squared, color = sigma)) + 
  geom_point() + 
  facet_wrap(~Gas, scales = "free")
```


## Output

## Reproducibility

```{r}
sessionInfo()
```
